From: Hans-Peter Jansen <hpj@urpla.net>
Date: Sat, 05 Dec 2020 20:39:00 +0100
Subject: [PATCH] Tentative fix for NVIDIA 390.138 driver for Linux 5.10-rc6

Based on: [PATCH] Tentative fix for NVIDIA 455.28 driver for Linux 5.10-rc1
From: Joan Bruguera <joanbrugueram@gmail.com>

---
 common/inc/nv-linux.h                   | 6 ++++++
 nvidia-drm/nvidia-drm-gem-user-memory.c | 7 +++++++
 2 files changed, 13 insertions(+)

Index: b/kernel/common/inc/nv-linux.h
===================================================================
--- a/kernel/common/inc/nv-linux.h
+++ b/kernel/common/inc/nv-linux.h
@@ -11,6 +11,7 @@
 #ifndef _NV_LINUX_H_
 #define _NV_LINUX_H_
 
+#include <linux/version.h>
 #include "nvstatus.h"
 #include "nv-misc.h"
 #include "nv.h"
@@ -180,6 +181,12 @@ static inline uid_t __kuid_val(kuid_t ui
 #include <linux/dma-mapping.h>
 #endif
 
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(5, 10, 0))
+// dma-mapping.h has been split on commit 0a0f0d8be76dcd4390ff538e7060fda34db79717,,
+// so this needs to be incldued now for the build to work
+#include <linux/dma-map-ops.h>
+#endif
+
 #if defined(CONFIG_SWIOTLB) && defined(NVCPU_AARCH64)
 #include <linux/swiotlb.h>
 #endif
@@ -1320,7 +1327,6 @@ static inline NvBool nv_dma_maps_swiotlb
      * get_dma_ops() interface.
      */
     #if defined(NV_GET_DMA_OPS_PRESENT)
-      #if defined(NV_DMA_MAP_OPS_PRESENT) || defined(NV_SWIOTLB_DMA_OPS_PRESENT)
     /*
      * The __attribute__ ((unused)) is necessary because in at least one
      * case, *none* of the preprocessor branches below are taken, and
@@ -1328,14 +1334,15 @@ static inline NvBool nv_dma_maps_swiotlb
      * happen with the (NV_IS_EXPORT_SYMBOL_PRESENT_swiotlb_map_sg_attrs == 1)
      * case.
      */
-    const struct dma_map_ops *ops __attribute__ ((unused)) = get_dma_ops(&dev->dev);
+      #if (LINUX_VERSION_CODE >= KERNEL_VERSION(5, 10, 0))
+        const struct dma_map_ops *ops __attribute__ ((unused)) = get_dma_ops(dev);
       #else
-    const struct dma_mapping_ops *ops __attribute__ ((unused)) = get_dma_ops(&dev->dev);
+        const struct dma_map_ops *ops __attribute__ ((unused)) = get_dma_ops(&dev->dev);
       #endif
     #else
     const struct dma_mapping_ops *ops __attribute__ ((unused)) = dma_ops;
     #endif
-    #if defined(NV_DMA_MAP_OPS_PRESENT) || defined(NV_SWIOTLB_DMA_OPS_PRESENT)
+
     /*
      * The switch from dma_mapping_ops -> dma_map_ops coincided with the
      * switch from swiotlb_map_sg -> swiotlb_map_sg_attrs.
@@ -1356,9 +1363,9 @@ static inline NvBool nv_dma_maps_swiotlb
        * NV_IS_EXPORT_SYMBOL_PRESENT_swiotlb_dma_ops == 0) does
        * nothing, and ends up dropping us out to the last line of this function,
        * effectively returning false. The nearly-human-readable version of that
-       * case is "Either struct dma_map_ops or struct swiotlb_dma_ops is present
-       * (NV_DMA_MAP_OPS_PRESENT or NV_SWIOTLB_DMA_OPS_PRESENT is defined) but
-       * neither swiotlb_map_sg_attrs nor swiotlb_dma_ops is present".
+       * case is "struct swiotlb_dma_ops is present (NV_SWIOTLB_DMA_OPS_PRESENT
+       * is defined) but neither swiotlb_map_sg_attrs nor swiotlb_dma_ops is
+       * present".
        *
        * That can happen on kernels that fall within below range:
        *
@@ -1382,17 +1389,6 @@ static inline NvBool nv_dma_maps_swiotlb
        * we just return NV_FALSE and in nv_compute_gfp_mask() we check for
        * whether swiotlb could possibly be used (outside of swiotlb=force).
        */
-    #else
-    swiotlb_in_use = (ops->map_sg == swiotlb_map_sg);
-    #endif
-  #elif defined(NVCPU_X86_64)
-    /*
-     * Fallback for old 2.6 kernels - if the DMA operations infrastructure
-     * isn't in place, use the swiotlb flag. Before dma_ops was added, this
-     * flag used to be exported. It still exists in modern kernels but is no
-     * longer exported.
-     */
-    swiotlb_in_use = (swiotlb == 1);
   #endif
 #endif
 
Index: b/kernel/nvidia-drm/nvidia-drm-gem-user-memory.c
===================================================================
--- a/kernel/nvidia-drm/nvidia-drm-gem-user-memory.c
+++ b/kernel/nvidia-drm/nvidia-drm-gem-user-memory.c
@@ -20,6 +20,7 @@
  * DEALINGS IN THE SOFTWARE.
  */
 
+#include <linux/version.h>
 #include "nvidia-drm-conftest.h"
 
 #if defined(NV_DRM_AVAILABLE)
@@ -47,8 +48,14 @@ static struct sg_table *__nv_drm_gem_use
 {
     struct nv_drm_gem_user_memory *nv_user_memory = to_nv_user_memory(nv_gem);
 
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(5, 10, 0))
+    // New parameter to drm_prime_pages_to_sg (commit 707d561f77b5e2a6f90c9786bee44ee7a8dedc7e)
+    return drm_prime_pages_to_sg(nv_gem->nv_dev->dev, nv_user_memory->pages,
+                                 nv_user_memory->pages_count);
+#else
     return drm_prime_pages_to_sg(nv_user_memory->pages,
                                  nv_user_memory->pages_count);
+#endif
 }
 
 static void *__nv_drm_gem_user_memory_prime_vmap(
